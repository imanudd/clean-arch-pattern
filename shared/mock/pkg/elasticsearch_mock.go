// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/elasticsearch/elasticsearch.go

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockElasticsearchImpl is a mock of ElasticsearchImpl interface.
type MockElasticsearchImpl struct {
	ctrl     *gomock.Controller
	recorder *MockElasticsearchImplMockRecorder
}

// MockElasticsearchImplMockRecorder is the mock recorder for MockElasticsearchImpl.
type MockElasticsearchImplMockRecorder struct {
	mock *MockElasticsearchImpl
}

// NewMockElasticsearchImpl creates a new mock instance.
func NewMockElasticsearchImpl(ctrl *gomock.Controller) *MockElasticsearchImpl {
	mock := &MockElasticsearchImpl{ctrl: ctrl}
	mock.recorder = &MockElasticsearchImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticsearchImpl) EXPECT() *MockElasticsearchImplMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockElasticsearchImpl) Save(ctx context.Context, index string, document interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, index, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockElasticsearchImplMockRecorder) Save(ctx, index, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockElasticsearchImpl)(nil).Save), ctx, index, document)
}
